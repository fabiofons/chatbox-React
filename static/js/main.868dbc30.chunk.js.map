{"version":3,"sources":["User.js","Login.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["User","id","name","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","user","react_default","a","createElement","className","onSubmit","handleSubmit","bind","type","value","onChange","createUser","e","setState","target","preventDefault","fetch","method","headers","Content-Type","body","JSON","stringify","res","json","data","_id","console","log","_context","t0","props","history","push","React","Component","Chat","loginuser","inputValue","users","messages","login","message","assertThisInitialized","_this2","map","u","key","m","date","onKeyPress","_this3","getUsers","getMessages","socket","socketIOClient","emit","on","concat","filter","msg","newUsers","toConsumableArray","newMessages","_context2","d","Date","month","getMonth","day","getDate","hour","toLocaleString","minute","hour12","dateNow","App","react_router_dom","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mUAAeA,EAAA,CACbC,GAAI,GACJC,KAAM,ICkDOC,cA/Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CAACC,KAAM,IAHRR,wEAOZ,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQC,SAAUV,KAAKW,aAAaC,KAAKZ,OACvDM,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOJ,UAAW,aAAaK,MAAOd,KAAKI,MAAMC,KAAMU,SAAUf,KAAKgB,WAAWJ,KAAKZ,QAClGM,EAAAC,EAAAC,cAAA,UAAQK,KAAK,UAAb,+CAOCI,GACTjB,KAAKkB,SAAS,CACZb,KAAMY,EAAEE,OAAOL,qFAIAG,kFACjBA,EAAEG,mCAEkBC,MAAM,kCAAmC,CACzDC,OAAQ,OACRC,QAAS,CAACC,eAAe,oBACzBC,KAAMC,KAAKC,UAAU,CACnBtB,KAAQL,KAAKI,MAAMC,uBAJjBuB,kBAOaA,EAAIC,cAAjBC,SACNzB,EAAKX,GAAKoC,EAAKC,IACf1B,EAAKV,KAAOmC,EAAKzB,uDAEjB2B,QAAQC,IAARC,EAAAC,YAGFnC,KAAKoC,MAAMC,QAAQC,KAAK,6HA5CRC,IAAMC,4CCoKXC,cAlKb,SAAAA,EAAYL,GAAO,IAAAvC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyC,IACjB5C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2C,GAAAtC,KAAAH,KAAMoC,KAEDhC,MAAQ,CACXsC,UAAWrC,EAAKV,KAChBgD,WAAY,GACZC,MAAO,GAGPC,SAAU,GACVC,MAAO,IAITjD,EAAKkD,QAAUlD,EAAKkD,QAAQnC,KAAbd,OAAAkD,EAAA,EAAAlD,CAAAD,IACfA,EAAKa,SAAWb,EAAKa,SAASE,KAAdd,OAAAkD,EAAA,EAAAlD,CAAAD,IAfCA,wEAkBV,IAAAoD,EAAAjD,KACP,OACEM,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,YACdT,KAAKI,MAAMwC,MAAMM,IAAI,SAAAC,GACpB,OAAQA,EAAExD,OAASsD,EAAK7C,MAAMsC,UAC3BpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO2C,IAAKD,EAAEzD,IAC5BY,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBACrCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQ0C,EAAExD,MACvBW,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBACL,QAIhBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,gCAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAO2C,IAAI,QACvBpD,KAAKI,MAAMyC,SAASK,IAAI,SAAAG,GACrB,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAU2C,IAAKC,EAAE3D,IAC9BY,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YACV4C,EAAEhD,KADL,IACWC,EAAAC,EAAAC,cAAA,YAAO6C,EAAEC,OAEpBhD,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQ4C,EAAE5B,UAMjCnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,OAAOf,GAAG,OAAOoB,MAAOd,KAAKI,MAAMuC,WAAYY,WAAYvD,KAAKU,SAAUK,SAAUf,KAAK+C,UAC1GzC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iEAQL,IAAA+C,EAAAxD,KAClBA,KAAKyD,WACLzD,KAAK0D,cACL1D,KAAK2D,OAASC,IAAe,0BAE7B5D,KAAK2D,OAAOE,KAAK,QAAS,CAAExD,KAAMA,EAAKV,OAEvCK,KAAK2D,OAAOG,GAAG,iBAAkB,SAACnE,GAChCqC,QAAQC,IAAItC,EAAKU,MACjBmD,EAAKtC,SAAS,CACZ4B,MAAOnD,EAAKU,KACZuC,MAAOY,EAAKpD,MAAMwC,MAAMmB,OAAO,CAACpE,KAAMA,EAAKU,WAI/CL,KAAK2D,OAAOG,GAAG,oBAAqB,SAAA1D,GAClC,IAAMwC,EAAQY,EAAKpD,MAAMwC,MAAMoB,OAAO,SAAAb,GAAC,OAAIA,EAAExD,OAASS,EAAMC,OAC5D2B,QAAQC,IAAIW,GACZY,EAAKtC,SAAS,CACZ0B,MAAOA,MAIX5C,KAAK2D,OAAOG,GAAG,cAAe,SAAAG,GAC5BT,EAAKtC,SAAS,CACZ2B,SAAUW,EAAKpD,MAAMyC,SAASkB,OAAOE,GACrCtB,WAAW,uLAOKtB,MAAM,iDAAlBO,kBACaA,EAAIC,cAAjBC,SACAc,EAAQ5C,KAAKI,MAAMwC,MACnBsB,EAAWpC,EAAKoB,IAAI,SAAAC,GAKxB,MAJgB,CACdzD,GAAIyD,EAAEpB,IACNpC,KAAMwD,EAAE9C,QAKZL,KAAKkB,SAAS,CACZ0B,MAAK,GAAAmB,OAAAjE,OAAAqE,EAAA,EAAArE,CAAM8C,GAAN9C,OAAAqE,EAAA,EAAArE,CAAgBoE,wDAGvBlC,QAAQC,IAARC,EAAAC,mSAMkBd,MAAM,oDAAlBO,kBACaA,EAAIC,qBAAjBC,SACAe,EAAW7C,KAAKI,MAAMyC,mBACFf,EAAKoB,IAAI,SAAAG,GAOjC,MANmB,CACjB3D,GAAI2D,EAAEtB,IACN1B,KAAMgD,EAAEhD,KACRoB,KAAM4B,EAAE5B,KACR6B,KAAMD,EAAEC,gBALNc,SASNpE,KAAKkB,SAAS,CACZ2B,SAAQ,GAAAkB,OAAAjE,OAAAqE,EAAA,EAAArE,CAAM+C,GAAN/C,OAAAqE,EAAA,EAAArE,CAAmBsE,wDAG7BpC,QAAQC,IAARoC,EAAAlC,kJAKF,IACImC,EAAI,IAAIC,KACRC,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAE7DF,EAAEG,YACjBC,EAAMJ,EAAEK,UACRC,EAAON,EAAEO,eAAe,QAAS,CAAED,KAAM,UAAWE,OAAQ,UAAWC,QAAQ,IAEnF,OADYP,EAAMT,OAAO,IAAIW,EAAI,IAAIE,mCAI/B3D,GACNjB,KAAKkB,SAAS,CACZyB,WAAY1B,EAAEE,OAAOL,yCAIhBG,GACP,GAAa,UAAVA,EAAEmC,IAAiB,CACpB,IAAML,EAAU,CACd1C,KAAMA,EAAKV,KACX8B,KAAMzB,KAAKI,MAAMuC,WACjBW,KAAMtD,KAAKgF,WAEbhF,KAAK2D,OAAOE,KAAK,cAAed,WA9JnBR,IAAMC,WCYVyC,mLARX,OACE3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,KACE5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW1F,IACjCU,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAW7C,YALrBF,IAAMC,WCKJ+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.868dbc30.chunk.js","sourcesContent":["export default {\n  id: \"\",\n  name: \"\"\n}","import React from 'react';\nimport './App.css';\nimport user from './User'\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {user: ''};\n  }; \n\n  render() {\n    return(\n      <div>\n        <div className=\"login\">\n          <form className=\"chart\" onSubmit={this.handleSubmit.bind(this)}>\n            <h3>¿Cuál es tu nombre?</h3>\n            <input type=\"text\" className= \"inputlogin\" value={this.state.user} onChange={this.createUser.bind(this)}/>\n            <button type=\"submit\">Login</button>\n          </form>\n        </div>\n      </div>\n    );\n  };\n\n  createUser(e){\n    this.setState({\n      user: e.target.value\n    });\n  };\n\n  async handleSubmit(e){\n    e.preventDefault()\n    try {\n      const res = await fetch('http://localhost:3002/api/users', {\n        method: 'POST',\n        headers: {'Content-Type':'application/json'},\n        body: JSON.stringify({\n          \"user\": this.state.user\n        })\n      })\n      const data = await res.json();\n      user.id = data._id;\n      user.name = data.user;\n    } catch(err) {\n      console.log(err)\n    }\n\n    this.props.history.push('/chat'); \n  }\n};\n\nexport default Login;","import React from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './App.css';\nimport user from './User';\n\nclass Chat extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loginuser: user.name,\n      inputValue: \"\",\n      users: [\n        // {id: \"\",name:\"\"}\n      ],\n      messages: [],\n      login: \"\"\n    };\n\n    //this.socket = socketIOClient('http://localhost:3002/');\n    this.message = this.message.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"mainbox\">\n          <aside className=\"contacts\">\n            {this.state.users.map(u => {\n              return( u.name !== this.state.loginuser ? \n                (<div className=\"user\" key={u.id}>\n                  <span className=\"state\"><i className=\"fa fa-circle\" /></span>\n                  <p className=\"name\">{u.name}</p>\n                  <i className=\"fa fa-ellipsis-v\"></i>\n                </div>) : null\n              )\n            })}\n          </aside>\n          <div className=\"conversation\">\n            <div className=\"close-chat\">\n              <p>Close conversation</p>\n            </div>\n            <div className=\"chat\" key=\"chat\">\n              {this.state.messages.map(m =>{\n                  return (\n                    <div className=\"message\" key={m.id}>\n                      <p className=\"username\">\n                        {m.user} <span>{m.date}</span>\n                      </p>\n                      <p className=\"text\">{m.body}</p>\n                    </div>  \n                  )\n                })\n              }\n            </div>\n            <div className=\"type-zone\">\n              <input className=\"send\" id=\"send\" value={this.state.inputValue} onKeyPress={this.onSubmit} onChange={this.message}/>\n              <i className=\"far fa-smile\"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this.getUsers();\n    this.getMessages();\n    this.socket = socketIOClient('http://localhost:3002/');\n\n    this.socket.emit('login', { user: user.name});\n\n    this.socket.on('user-connected', (name) => {\n      console.log(name.user)\n      this.setState({\n        login: name.user,\n        users: this.state.users.concat({name: name.user})\n      })\n    });\n\n    this.socket.on('user-disconnected', state => {\n      const users = this.state.users.filter(u => u.name !== state.user)\n      console.log(users);\n      this.setState({\n        users: users\n      })\n    });\n\n    this.socket.on('new-message', msg => {\n      this.setState({\n        messages: this.state.messages.concat(msg),\n        inputValue:\"\"\n      })\n    });\n  }\n\n  async getUsers() {\n    try {\n      const res = await fetch('http://localhost:3002/api/users');\n      const data = await res.json();\n      const users = this.state.users;\n      const newUsers = data.map(u => {\n        const newUser = {\n          id: u._id,\n          name: u.user,\n        };\n        return newUser;\n      });\n\n      this.setState({\n        users: [...users, ...newUsers]\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async getMessages() {\n    try {\n      const res = await fetch('http://localhost:3002/api/messages');\n      const data = await res.json();\n      const messages = this.state.messages;\n      const newMessages = await data.map(m => {\n        const newMessage = {\n          id: m._id,\n          user: m.user,\n          body: m.body,\n          date: m.date\n        };\n        return newMessage;\n      });\n      this.setState({\n        messages: [...messages, ...newMessages]\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  dateNow() {\n    let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    let d = new Date();\n    let month = months[d.getMonth()]; \n    let day = d.getDate();\n    let hour = d.toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })\n    let fecha = month.concat(\" \",day,\" \",hour);\n    return fecha;\n  }\n\n  message(e) {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  onSubmit(e) {\n    if(e.key === \"Enter\") {\n      const message = {\n        user: user.name, // este usuario debe venir del login\n        body: this.state.inputValue,\n        date: this.dateNow()\n      }\n      this.socket.emit('new-message', message);\n    }\n  }\n}\n\nexport default Chat;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Login from './Login';\nimport Chat from './Chat'\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/chat\" component={Chat} />\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}